/*
* generated by Xtext
*/
package org.casualintellect.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.casualintellect.services.CasualIntellectGrammarAccess;

public class CasualIntellectParser extends AbstractContentAssistParser {
	
	@Inject
	private CasualIntellectGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.casualintellect.ui.contentassist.antlr.internal.InternalCasualIntellectParser createParser() {
		org.casualintellect.ui.contentassist.antlr.internal.InternalCasualIntellectParser result = new org.casualintellect.ui.contentassist.antlr.internal.InternalCasualIntellectParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getAtomicAccess().getValueAlternatives_1_1_0(), "rule__Atomic__ValueAlternatives_1_1_0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getTransitionsAccess().getGroup(), "rule__Transitions__Group__0");
					put(grammarAccess.getTransitionsAccess().getGroup_4(), "rule__Transitions__Group_4__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_7(), "rule__Transition__Group_7__0");
					put(grammarAccess.getTransitionAccess().getGroup_7_4(), "rule__Transition__Group_7_4__0");
					put(grammarAccess.getProcessInStateAccess().getGroup(), "rule__ProcessInState__Group__0");
					put(grammarAccess.getProcessInStateAccess().getGroup_3(), "rule__ProcessInState__Group_3__0");
					put(grammarAccess.getProcessAfterStateAccess().getGroup(), "rule__ProcessAfterState__Group__0");
					put(grammarAccess.getProcessAfterStateAccess().getGroup_3(), "rule__ProcessAfterState__Group_3__0");
					put(grammarAccess.getProcessBeforeStateAccess().getGroup(), "rule__ProcessBeforeState__Group__0");
					put(grammarAccess.getProcessBeforeStateAccess().getGroup_3(), "rule__ProcessBeforeState__Group_3__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
					put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
					put(grammarAccess.getModelAccess().getStatesAssignment(), "rule__Model__StatesAssignment");
					put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
					put(grammarAccess.getStateAccess().getBeforeAssignment_3(), "rule__State__BeforeAssignment_3");
					put(grammarAccess.getStateAccess().getAfterAssignment_4(), "rule__State__AfterAssignment_4");
					put(grammarAccess.getStateAccess().getInProcessAssignment_5(), "rule__State__InProcessAssignment_5");
					put(grammarAccess.getStateAccess().getTransitionsAssignment_6(), "rule__State__TransitionsAssignment_6");
					put(grammarAccess.getTransitionsAccess().getListAssignment_3(), "rule__Transitions__ListAssignment_3");
					put(grammarAccess.getTransitionsAccess().getListAssignment_4_1(), "rule__Transitions__ListAssignment_4_1");
					put(grammarAccess.getTransitionAccess().getNameAssignment_2(), "rule__Transition__NameAssignment_2");
					put(grammarAccess.getTransitionAccess().getConditionAssignment_6(), "rule__Transition__ConditionAssignment_6");
					put(grammarAccess.getTransitionAccess().getMethodsAssignment_7_3(), "rule__Transition__MethodsAssignment_7_3");
					put(grammarAccess.getTransitionAccess().getMethodsAssignment_7_4_1(), "rule__Transition__MethodsAssignment_7_4_1");
					put(grammarAccess.getProcessInStateAccess().getMethodsAssignment_2(), "rule__ProcessInState__MethodsAssignment_2");
					put(grammarAccess.getProcessInStateAccess().getMethodsAssignment_3_1(), "rule__ProcessInState__MethodsAssignment_3_1");
					put(grammarAccess.getProcessAfterStateAccess().getMethodsAssignment_2(), "rule__ProcessAfterState__MethodsAssignment_2");
					put(grammarAccess.getProcessAfterStateAccess().getMethodsAssignment_3_1(), "rule__ProcessAfterState__MethodsAssignment_3_1");
					put(grammarAccess.getProcessBeforeStateAccess().getMethodsAssignment_2(), "rule__ProcessBeforeState__MethodsAssignment_2");
					put(grammarAccess.getProcessBeforeStateAccess().getMethodsAssignment_3_1(), "rule__ProcessBeforeState__MethodsAssignment_3_1");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getChildAssignment_0_2(), "rule__Primary__ChildAssignment_0_2");
					put(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2(), "rule__Primary__ExpressionAssignment_1_2");
					put(grammarAccess.getAtomicAccess().getValueAssignment_0_1(), "rule__Atomic__ValueAssignment_0_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.casualintellect.ui.contentassist.antlr.internal.InternalCasualIntellectParser typedParser = (org.casualintellect.ui.contentassist.antlr.internal.InternalCasualIntellectParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CasualIntellectGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CasualIntellectGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
