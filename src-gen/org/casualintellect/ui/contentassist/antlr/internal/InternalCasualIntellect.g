/*
* generated by Xtext
*/
grammar InternalCasualIntellect;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.casualintellect.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.casualintellect.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.casualintellect.services.CasualIntellectGrammarAccess;

}

@parser::members {
 
 	private CasualIntellectGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CasualIntellectGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getModelAccess().getStatesAssignment()); }
(rule__Model__StatesAssignment)
{ after(grammarAccess.getModelAccess().getStatesAssignment()); }
)
(
{ before(grammarAccess.getModelAccess().getStatesAssignment()); }
(rule__Model__StatesAssignment)*
{ after(grammarAccess.getModelAccess().getStatesAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleState
entryRuleState 
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateAccess().getGroup()); }
(rule__State__Group__0)
{ after(grammarAccess.getStateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransitions
entryRuleTransitions 
:
{ before(grammarAccess.getTransitionsRule()); }
	 ruleTransitions
{ after(grammarAccess.getTransitionsRule()); } 
	 EOF 
;

// Rule Transitions
ruleTransitions
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionsAccess().getGroup()); }
(rule__Transitions__Group__0)
{ after(grammarAccess.getTransitionsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComma
entryRuleComma 
:
{ before(grammarAccess.getCommaRule()); }
	 ruleComma
{ after(grammarAccess.getCommaRule()); } 
	 EOF 
;

// Rule Comma
ruleComma
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommaAccess().getCommaKeyword()); }

	',' 

{ after(grammarAccess.getCommaAccess().getCommaKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransition
entryRuleTransition 
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionAccess().getGroup()); }
(rule__Transition__Group__0)
{ after(grammarAccess.getTransitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcessInState
entryRuleProcessInState 
:
{ before(grammarAccess.getProcessInStateRule()); }
	 ruleProcessInState
{ after(grammarAccess.getProcessInStateRule()); } 
	 EOF 
;

// Rule ProcessInState
ruleProcessInState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcessInStateAccess().getGroup()); }
(rule__ProcessInState__Group__0)
{ after(grammarAccess.getProcessInStateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcessAfterState
entryRuleProcessAfterState 
:
{ before(grammarAccess.getProcessAfterStateRule()); }
	 ruleProcessAfterState
{ after(grammarAccess.getProcessAfterStateRule()); } 
	 EOF 
;

// Rule ProcessAfterState
ruleProcessAfterState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcessAfterStateAccess().getGroup()); }
(rule__ProcessAfterState__Group__0)
{ after(grammarAccess.getProcessAfterStateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcessBeforeState
entryRuleProcessBeforeState 
:
{ before(grammarAccess.getProcessBeforeStateRule()); }
	 ruleProcessBeforeState
{ after(grammarAccess.getProcessBeforeStateRule()); } 
	 EOF 
;

// Rule ProcessBeforeState
ruleProcessBeforeState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcessBeforeStateAccess().getGroup()); }
(rule__ProcessBeforeState__Group__0)
{ after(grammarAccess.getProcessBeforeStateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getOrParserRuleCall()); }
	ruleOr
{ after(grammarAccess.getExpressionAccess().getOrParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOr
entryRuleOr 
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrAccess().getGroup()); }
(rule__Or__Group__0)
{ after(grammarAccess.getOrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnd
entryRuleAnd 
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndAccess().getGroup()); }
(rule__And__Group__0)
{ after(grammarAccess.getAndAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimary
entryRulePrimary 
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomic
entryRuleAtomic 
:
{ before(grammarAccess.getAtomicRule()); }
	 ruleAtomic
{ after(grammarAccess.getAtomicRule()); } 
	 EOF 
;

// Rule Atomic
ruleAtomic
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicAccess().getAlternatives()); }
(rule__Atomic__Alternatives)
{ after(grammarAccess.getAtomicAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getGroup_0()); }
(rule__Primary__Group_0__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
(rule__Primary__Group_1__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2()); }
	ruleAtomic
{ after(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getGroup_0()); }
(rule__Atomic__Group_0__0)
{ after(grammarAccess.getAtomicAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getGroup_1()); }
(rule__Atomic__Group_1__0)
{ after(grammarAccess.getAtomicAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueTrueKeyword_1_1_0_0()); }

	'true' 

{ after(grammarAccess.getAtomicAccess().getValueTrueKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getValueFalseKeyword_1_1_0_1()); }

	'false' 

{ after(grammarAccess.getAtomicAccess().getValueFalseKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__State__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__0__Impl
	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getStateKeyword_0()); }

	'state' 

{ after(grammarAccess.getStateAccess().getStateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__1__Impl
	rule__State__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameAssignment_1()); }
(rule__State__NameAssignment_1)
{ after(grammarAccess.getStateAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__2__Impl
	rule__State__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__3__Impl
	rule__State__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getBeforeAssignment_3()); }
(rule__State__BeforeAssignment_3)
{ after(grammarAccess.getStateAccess().getBeforeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__4__Impl
	rule__State__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getAfterAssignment_4()); }
(rule__State__AfterAssignment_4)?
{ after(grammarAccess.getStateAccess().getAfterAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__5__Impl
	rule__State__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getInProcessAssignment_5()); }
(rule__State__InProcessAssignment_5)
{ after(grammarAccess.getStateAccess().getInProcessAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__6__Impl
	rule__State__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getTransitionsAssignment_6()); }
(rule__State__TransitionsAssignment_6)?
{ after(grammarAccess.getStateAccess().getTransitionsAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Transitions__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transitions__Group__0__Impl
	rule__Transitions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transitions__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionsAccess().getTransitionsKeyword_0()); }

	'transitions' 

{ after(grammarAccess.getTransitionsAccess().getTransitionsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transitions__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transitions__Group__1__Impl
	rule__Transitions__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transitions__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionsAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getTransitionsAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transitions__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transitions__Group__2__Impl
	rule__Transitions__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transitions__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionsAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getTransitionsAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transitions__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transitions__Group__3__Impl
	rule__Transitions__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Transitions__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionsAccess().getListAssignment_3()); }
(rule__Transitions__ListAssignment_3)?
{ after(grammarAccess.getTransitionsAccess().getListAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transitions__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transitions__Group__4__Impl
	rule__Transitions__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Transitions__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionsAccess().getGroup_4()); }
(rule__Transitions__Group_4__0)*
{ after(grammarAccess.getTransitionsAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transitions__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transitions__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transitions__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionsAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getTransitionsAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Transitions__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transitions__Group_4__0__Impl
	rule__Transitions__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transitions__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionsAccess().getCommaParserRuleCall_4_0()); }
	ruleComma
{ after(grammarAccess.getTransitionsAccess().getCommaParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transitions__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transitions__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transitions__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionsAccess().getListAssignment_4_1()); }
(rule__Transitions__ListAssignment_4_1)
{ after(grammarAccess.getTransitionsAccess().getListAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Transition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__0__Impl
	rule__Transition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getTransitionKeyword_0()); }

	'transition' 

{ after(grammarAccess.getTransitionAccess().getTransitionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__1__Impl
	rule__Transition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getTransitionAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__2__Impl
	rule__Transition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getNameAssignment_2()); }
(rule__Transition__NameAssignment_2)
{ after(grammarAccess.getTransitionAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__3__Impl
	rule__Transition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getTransitionAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__4__Impl
	rule__Transition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getConditionKeyword_4()); }

	'condition' 

{ after(grammarAccess.getTransitionAccess().getConditionKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__5__Impl
	rule__Transition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getColonKeyword_5()); }

	':' 

{ after(grammarAccess.getTransitionAccess().getColonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__6__Impl
	rule__Transition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getConditionAssignment_6()); }
(rule__Transition__ConditionAssignment_6)
{ after(grammarAccess.getTransitionAccess().getConditionAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGroup_7()); }
(rule__Transition__Group_7__0)?
{ after(grammarAccess.getTransitionAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Transition__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_7__0__Impl
	rule__Transition__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getSemicolonKeyword_7_0()); }

	';' 

{ after(grammarAccess.getTransitionAccess().getSemicolonKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_7__1__Impl
	rule__Transition__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getMethodsKeyword_7_1()); }

	'methods' 

{ after(grammarAccess.getTransitionAccess().getMethodsKeyword_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_7__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_7__2__Impl
	rule__Transition__Group_7__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_7__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getColonKeyword_7_2()); }

	':' 

{ after(grammarAccess.getTransitionAccess().getColonKeyword_7_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_7__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_7__3__Impl
	rule__Transition__Group_7__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_7__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getMethodsAssignment_7_3()); }
(rule__Transition__MethodsAssignment_7_3)
{ after(grammarAccess.getTransitionAccess().getMethodsAssignment_7_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_7__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_7__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_7__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGroup_7_4()); }
(rule__Transition__Group_7_4__0)*
{ after(grammarAccess.getTransitionAccess().getGroup_7_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Transition__Group_7_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_7_4__0__Impl
	rule__Transition__Group_7_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_7_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getCommaKeyword_7_4_0()); }

	',' 

{ after(grammarAccess.getTransitionAccess().getCommaKeyword_7_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_7_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_7_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_7_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getMethodsAssignment_7_4_1()); }
(rule__Transition__MethodsAssignment_7_4_1)
{ after(grammarAccess.getTransitionAccess().getMethodsAssignment_7_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcessInState__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessInState__Group__0__Impl
	rule__ProcessInState__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessInState__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessInStateAccess().getIn_processKeyword_0()); }

	'in_process' 

{ after(grammarAccess.getProcessInStateAccess().getIn_processKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessInState__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessInState__Group__1__Impl
	rule__ProcessInState__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessInState__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessInStateAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getProcessInStateAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessInState__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessInState__Group__2__Impl
	rule__ProcessInState__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessInState__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessInStateAccess().getMethodsAssignment_2()); }
(rule__ProcessInState__MethodsAssignment_2)?
{ after(grammarAccess.getProcessInStateAccess().getMethodsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessInState__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessInState__Group__3__Impl
	rule__ProcessInState__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessInState__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessInStateAccess().getGroup_3()); }
(rule__ProcessInState__Group_3__0)*
{ after(grammarAccess.getProcessInStateAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessInState__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessInState__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessInState__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessInStateAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getProcessInStateAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ProcessInState__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessInState__Group_3__0__Impl
	rule__ProcessInState__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessInState__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessInStateAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getProcessInStateAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessInState__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessInState__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessInState__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessInStateAccess().getMethodsAssignment_3_1()); }
(rule__ProcessInState__MethodsAssignment_3_1)
{ after(grammarAccess.getProcessInStateAccess().getMethodsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcessAfterState__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessAfterState__Group__0__Impl
	rule__ProcessAfterState__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessAfterState__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAfterStateAccess().getAfterKeyword_0()); }

	'after' 

{ after(grammarAccess.getProcessAfterStateAccess().getAfterKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessAfterState__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessAfterState__Group__1__Impl
	rule__ProcessAfterState__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessAfterState__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAfterStateAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getProcessAfterStateAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessAfterState__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessAfterState__Group__2__Impl
	rule__ProcessAfterState__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessAfterState__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAfterStateAccess().getMethodsAssignment_2()); }
(rule__ProcessAfterState__MethodsAssignment_2)?
{ after(grammarAccess.getProcessAfterStateAccess().getMethodsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessAfterState__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessAfterState__Group__3__Impl
	rule__ProcessAfterState__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessAfterState__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAfterStateAccess().getGroup_3()); }
(rule__ProcessAfterState__Group_3__0)*
{ after(grammarAccess.getProcessAfterStateAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessAfterState__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessAfterState__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessAfterState__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAfterStateAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getProcessAfterStateAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ProcessAfterState__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessAfterState__Group_3__0__Impl
	rule__ProcessAfterState__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessAfterState__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAfterStateAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getProcessAfterStateAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessAfterState__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessAfterState__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessAfterState__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAfterStateAccess().getMethodsAssignment_3_1()); }
(rule__ProcessAfterState__MethodsAssignment_3_1)
{ after(grammarAccess.getProcessAfterStateAccess().getMethodsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcessBeforeState__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessBeforeState__Group__0__Impl
	rule__ProcessBeforeState__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessBeforeState__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessBeforeStateAccess().getBeforeKeyword_0()); }

	'before' 

{ after(grammarAccess.getProcessBeforeStateAccess().getBeforeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessBeforeState__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessBeforeState__Group__1__Impl
	rule__ProcessBeforeState__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessBeforeState__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessBeforeStateAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getProcessBeforeStateAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessBeforeState__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessBeforeState__Group__2__Impl
	rule__ProcessBeforeState__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessBeforeState__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessBeforeStateAccess().getMethodsAssignment_2()); }
(rule__ProcessBeforeState__MethodsAssignment_2)?
{ after(grammarAccess.getProcessBeforeStateAccess().getMethodsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessBeforeState__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessBeforeState__Group__3__Impl
	rule__ProcessBeforeState__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessBeforeState__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessBeforeStateAccess().getGroup_3()); }
(rule__ProcessBeforeState__Group_3__0)*
{ after(grammarAccess.getProcessBeforeStateAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessBeforeState__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessBeforeState__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessBeforeState__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessBeforeStateAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getProcessBeforeStateAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ProcessBeforeState__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessBeforeState__Group_3__0__Impl
	rule__ProcessBeforeState__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessBeforeState__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessBeforeStateAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getProcessBeforeStateAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessBeforeState__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessBeforeState__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessBeforeState__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessBeforeStateAccess().getMethodsAssignment_3_1()); }
(rule__ProcessBeforeState__MethodsAssignment_3_1)
{ after(grammarAccess.getProcessBeforeStateAccess().getMethodsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Or__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getGroup_1()); }
(rule__Or__Group_1__0)*
{ after(grammarAccess.getOrAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Or__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }

	'||' 

{ after(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
(rule__Or__RightAssignment_1_2)
{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__And__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
{ after(grammarAccess.getAndAccess().getPrimaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getGroup_1()); }
(rule__And__Group_1__0)*
{ after(grammarAccess.getAndAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__And__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }

	'&&' 

{ after(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
(rule__And__RightAssignment_1_2)
{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Primary__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_0__0__Impl
	rule__Primary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getNestedExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getPrimaryAccess().getNestedExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_0__1__Impl
	rule__Primary__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_1()); }

	'(' 

{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_0__2__Impl
	rule__Primary__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getChildAssignment_0_2()); }
(rule__Primary__ChildAssignment_0_2)
{ after(grammarAccess.getPrimaryAccess().getChildAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_3()); }

	')' 

{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Primary__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getNotAction_1_0()); }
(

)
{ after(grammarAccess.getPrimaryAccess().getNotAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1()); }

	'!' 

{ after(grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2()); }
(rule__Primary__ExpressionAssignment_1_2)
{ after(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Atomic__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0__0__Impl
	rule__Atomic__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getStringConstantAction_0_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getStringConstantAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAssignment_0_1()); }
(rule__Atomic__ValueAssignment_0_1)
{ after(grammarAccess.getAtomicAccess().getValueAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atomic__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_1__0__Impl
	rule__Atomic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getBoolConstantAction_1_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getBoolConstantAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
(rule__Atomic__ValueAssignment_1_1)
{ after(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__StatesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getStatesStateParserRuleCall_0()); }
	ruleState{ after(grammarAccess.getModelAccess().getStatesStateParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__BeforeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getBeforeProcessBeforeStateParserRuleCall_3_0()); }
	ruleProcessBeforeState{ after(grammarAccess.getStateAccess().getBeforeProcessBeforeStateParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__AfterAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getAfterProcessAfterStateParserRuleCall_4_0()); }
	ruleProcessAfterState{ after(grammarAccess.getStateAccess().getAfterProcessAfterStateParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__InProcessAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getInProcessProcessInStateParserRuleCall_5_0()); }
	ruleProcessInState{ after(grammarAccess.getStateAccess().getInProcessProcessInStateParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__TransitionsAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getTransitionsTransitionsParserRuleCall_6_0()); }
	ruleTransitions{ after(grammarAccess.getStateAccess().getTransitionsTransitionsParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transitions__ListAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionsAccess().getListTransitionParserRuleCall_3_0()); }
	ruleTransition{ after(grammarAccess.getTransitionsAccess().getListTransitionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transitions__ListAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionsAccess().getListTransitionParserRuleCall_4_1_0()); }
	ruleTransition{ after(grammarAccess.getTransitionsAccess().getListTransitionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getTransitionAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__ConditionAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getConditionExpressionParserRuleCall_6_0()); }
	ruleExpression{ after(grammarAccess.getTransitionAccess().getConditionExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__MethodsAssignment_7_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getMethodsIDTerminalRuleCall_7_3_0()); }
	RULE_ID{ after(grammarAccess.getTransitionAccess().getMethodsIDTerminalRuleCall_7_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__MethodsAssignment_7_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getMethodsIDTerminalRuleCall_7_4_1_0()); }
	RULE_ID{ after(grammarAccess.getTransitionAccess().getMethodsIDTerminalRuleCall_7_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessInState__MethodsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessInStateAccess().getMethodsIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getProcessInStateAccess().getMethodsIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessInState__MethodsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessInStateAccess().getMethodsIDTerminalRuleCall_3_1_0()); }
	RULE_ID{ after(grammarAccess.getProcessInStateAccess().getMethodsIDTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessAfterState__MethodsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAfterStateAccess().getMethodsIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getProcessAfterStateAccess().getMethodsIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessAfterState__MethodsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAfterStateAccess().getMethodsIDTerminalRuleCall_3_1_0()); }
	RULE_ID{ after(grammarAccess.getProcessAfterStateAccess().getMethodsIDTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessBeforeState__MethodsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessBeforeStateAccess().getMethodsIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getProcessBeforeStateAccess().getMethodsIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessBeforeState__MethodsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessBeforeStateAccess().getMethodsIDTerminalRuleCall_3_1_0()); }
	RULE_ID{ after(grammarAccess.getProcessBeforeStateAccess().getMethodsIDTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	ruleAnd{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	rulePrimary{ after(grammarAccess.getAndAccess().getRightPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ChildAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getChildExpressionParserRuleCall_0_2_0()); }
	ruleExpression{ after(grammarAccess.getPrimaryAccess().getChildExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ExpressionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); }
	rulePrimary{ after(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueIDTerminalRuleCall_0_1_0()); }
	RULE_ID{ after(grammarAccess.getAtomicAccess().getValueIDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAlternatives_1_1_0()); }
(rule__Atomic__ValueAlternatives_1_1_0)
{ after(grammarAccess.getAtomicAccess().getValueAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


